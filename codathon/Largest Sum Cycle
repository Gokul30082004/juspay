
class Solution{
    ArrayList<ArrayList<Integer>> list;
    int par[],vis[];
    ArrayList<Integer> child;
    private long dfs(int i,int p){
        
        vis[i]=1;
        par[i]=p;
        child.add(i);
        for(int it:list.get(i)){
            if(vis[it]==0){
                // System.out.println(it);
                
                long tempans=dfs(it,i);
                if(tempans!=-1)return tempans;
            }
            else if(vis[it]==1){
                int temp=i;
                int ans=0;
                while(temp!=it){
                    // System.out.println(temp);
                    
                    ans+=temp;
                    temp=par[temp];
                }
                if(it==temp){
                    ans+=it;
                    return ans;
                }
                return -1;
            }
        }
        return -1;
    }
    
    public long largesSumCycle(int N, int Edge[]){
        list=new ArrayList<>();
        par=new int[N];
        child=new ArrayList<Integer>();
        for(int i=0;i<N;i++){
            list.add(new ArrayList<>());
            if(Edge[i]!=-1)
                list.get(i).add(Edge[i]);
        }
        
        vis=new int[N];
        Arrays.fill(vis,0);
        long ans=-1;
        for(int i=0;i<N;i++){
            if(vis[i]==0){
                // System.out.println(i);
                ans=Math.max(ans,dfs(i,-1));
                for(int it:child){
                    vis[it]=2;
                }
                child.clear();
            }
        }
        return ans;
    }
}

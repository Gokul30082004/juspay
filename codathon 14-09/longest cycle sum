class Solution{
    
    private int vis[], par[];
    private ArrayList<ArrayList<Integer>> list;
    private Set<Integer> set;
    private long ans;
    
    private long find_cycle(int i, int parent){
        
        vis[i] = 1;
        par[i] = parent;
        set.add(i);
        
        for(int it : list.get(i)){
            
            if(vis[it] == 0){
                
                long temp_ans = find_cycle(it, i);
                
                if(temp_ans != -1) return temp_ans;
            }
            
            else if(vis[it] == 1){
                
                long val = 0;
                int temp_par = i;
                
                while(temp_par != it){
                    val += temp_par;
                    temp_par = par[temp_par];
                }
                
                if(temp_par == it)
                    return val + it;
                return -1;
            }
            
        }
        
        return -1;
        
    }
    
    public long largesSumCycle(int N, int Edge[]){
        
        
        vis = new int[N];
        par = new int[N];
        list = new ArrayList<>();
        set = new HashSet<>();
        ans = -1;

        
        for(int i = 0; i < N; i++){
            
            list.add(new ArrayList<>());
            vis[i] = 0;
            
            if(Edge[i] != -1)
                list.get(i).add(Edge[i]);
        }
        
        for(int i = 0; i < N; i++){
            
            if(vis[i] == 0){
                
                ans = Math.max(ans, find_cycle(i, -1));
                
                for(int it : set)
                    vis[it] = 2;
                set.clear();
            }
            
        }
        
        return ans;
 
    }
}
